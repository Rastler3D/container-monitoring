version: '3'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=containermonitor
      - SERVER_PORT=8080
      - BROKER_QUEUE=pings
      - BROKER_URL=amqp://guest:guest@broker:5672/
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: always

  pinger:
    build:
      context: .
      dockerfile: pinger/Dockerfile
    environment:
      - PING_INTERVAL=10s
      - BROKER_QUEUE=pings
      - BROKER_URL=amqp://guest:guest@broker:5672/
    cap_add:
      - NET_ADMIN
    user: root

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    depends_on:
      broker:
        condition: service_healthy

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=containermonitor
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d containermonitor" ]
      interval: 5s
      timeout: 5s
      retries: 5

  broker:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pgdata: